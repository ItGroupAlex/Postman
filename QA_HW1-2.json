{
	"info": {
		"_postman_id": "36d30d76-0e5c-472b-86c5-ec1d2bced5af",
		"name": "QA_HW1-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name=Alex&age=30",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alex",
									"type": "default"
								},
								{
									"key": "age",
									"value": "30",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?name=Alex&age=30&weight=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "30"
								},
								{
									"key": "weight",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name=Антон&age=20&salary=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Антон"
								},
								{
									"key": "age",
									"value": "20"
								},
								{
									"key": "salary",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Антон&age=20&salary=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Антон"
								},
								{
									"key": "age",
									"value": "20"
								},
								{
									"key": "salary",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Антон&age=20&salary=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Антон"
								},
								{
									"key": "age",
									"value": "20"
								},
								{
									"key": "salary",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Алла",
									"type": "default"
								},
								{
									"key": "age",
									"value": "25",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}//user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW2",
			"item": [
				{
					"name": "HW_2 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "HW_2 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//3. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"//4. Проверить, что name в ответе равно name с request (name вбить руками.)\r",
									"pm.test(\"Name is correct with Hardcod\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Anna\");\r",
									"});\r",
									"//5. Проверить, что age в ответе равно age с request (age вбить руками.)\r",
									"pm.test(\"Age is correct with Hardcod\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(\"20\");\r",
									"});\r",
									"//6. Проверить, что salary в ответе равно salary с request (salary вбить руками.)\r",
									"pm.test(\"Salary is correct with Hardcod\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(1);\r",
									"});\r",
									"//7. Спарсить request.\r",
									"var req = request.data\r",
									"//8. Проверить, что name в ответе равно name с request (name забрать из request.)\r",
									"pm.test(\"Name is correct with request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"//9. Проверить, что age в ответе равно age с request (age забрать из request.)\r",
									"pm.test(\"Age is correct with request\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req.age);\r",
									"});\r",
									"//10. Проверить, что salary в ответе равно salary с request (salary забрать из request.)\r",
									"pm.test(\"Salary is correct with request\", function () {\r",
									"    pm.expect(String(jsonData.salary)).to.eql(req.salary);\r",
									"});\r",
									"//11. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)var jsonData = pm.response.json();\r",
									"pm.test(\"salary_1_5_year is correct\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Anna",
									"type": "default"
								},
								{
									"key": "age",
									"value": "20",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "1",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Anna",
									"disabled": true
								},
								{
									"key": "age",
									"value": "20",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HW_2 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//3. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"//4. Спарсить request.\r",
									"var req_url = pm.request.url.query.toObject();\r",
									"//5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
									"pm.test(\"Name is correct with request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req_url.name);\r",
									"});\r",
									"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age is correct with request\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req_url.age);\r",
									"});\r",
									"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Salary is correct with request\", function () {\r",
									"    pm.expect(String(jsonData.salary)).to.eql(req_url.salary);\r",
									"});\r",
									"//8. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"//9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog having name is correct\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).be.a('string');\r",
									"});\r",
									"//10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog having age is correct\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.be.a('number');\r",
									"});\r",
									"//11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Dog name is Luky is correct\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"//12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Dog 4 age old is correct\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_3?name=Anna&age=20&salary=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Anna"
								},
								{
									"key": "age",
									"value": "20"
								},
								{
									"key": "salary",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HW_2 4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//3. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"//4. Спарсить request.\r",
									"var req_url = pm.request.url.query.toObject();\r",
									"//5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
									"pm.test(\"Name is correct with request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req_url.name);\r",
									"});\r",
									"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Age is correct with request\", function () {\r",
									"    pm.expect(String(jsonData.age)).to.eql(req_url.age);\r",
									"});\r",
									"//7. Вывести в консоль параметр salary из request.\r",
									"console.log(req_url.salary)\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(jsonData.salary)\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[0])\r",
									"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[1])\r",
									"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[2])\r",
									"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Salary-0 is eql with request\", function () {\r",
									"    pm.expect(String(jsonData.salary[0])).to.eql(req_url.salary);\r",
									"});\r",
									"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Salary-1 is eql with request\", function () {\r",
									"    pm.expect(jsonData.salary[1]).to.eql(String((req_url.salary)*2));\r",
									"});\r",
									"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Salary-2 is eql with request\", function () {\r",
									"    pm.expect(jsonData.salary[2]).to.eql(String((req_url.salary)*3));\r",
									"});\r",
									"//15. Создать в окружении переменную name\r",
									"pm.environment.set(\"name\");\r",
									"//16. Создать в окружении переменную age\r",
									"pm.environment.set(\"age\");\r",
									"//17. Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary\");\r",
									"//18. Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", req_url.name);\r",
									"//19. Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", req_url.age);\r",
									"//20. Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", req_url.salary);\r",
									"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"var n = 0;\r",
									"while (n < (jsonData.salary).length) \r",
									"{\r",
									"console.log(jsonData.salary[n]);\r",
									"n++\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_4?name=Anna&age=20&salary=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Anna"
								},
								{
									"key": "age",
									"value": "20"
								},
								{
									"key": "salary",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HW_2 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Вставить параметр salary из окружения в request\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"var name = pm.environment.get(\"name\");\r",
									"console.log(name);\r",
									"request.data.name = name\r",
									"// 4. Отправить запрос.\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// 6. Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"// 7. Спарсить request.\r",
									"var req = request.data\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"start_qa_salary is number\", function () {\r",
									"    pm.expect(jsonData.start_qa_salary).be.a('number');\r",
									"});\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"qa_salary_after_6_months is number\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).be.a('number');\r",
									"});\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"qa_salary_after_12_months is number\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).be.a('number');\r",
									"});\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"var resp_qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
									"pm.test(\"qa_salary_after_1.5_year is number\", function () {\r",
									"    pm.expect(resp_qa_salary_after_1_5_year).be.a('number');\r",
									"});\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"var resp_qa_salary_after_3_5_year = jsonData[\"qa_salary_after_3.5_years\"]\r",
									"pm.test(\"qa_salary_after_3.5_years is number\", function () {\r",
									"    pm.expect(resp_qa_salary_after_3_5_year).be.a('number');\r",
									"});\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"person is json\", function () {\r",
									"    pm.expect(jsonData.person).be.a('object');\r",
									"});\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"start_qa_salary = salary from request \", function () {\r",
									"    pm.expect(String(jsonData.start_qa_salary)).be.eql(req.salary);\r",
									"});\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_6_months = salary*2 from request \", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).be.eql(req.salary*2);\r",
									"});\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months = salary*2.7 from request \", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).be.eql(req.salary*2.7);\r",
									"});\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request \", function () {\r",
									"    pm.expect(resp_qa_salary_after_1_5_year).be.eql(req.salary*3.3);\r",
									"});\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_3.5_years = salary*3.8 from request \", function () {\r",
									"    pm.expect(resp_qa_salary_after_3_5_year).be.eql(req.salary*3.8);\r",
									"});\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"salary person = salary from request \", function () {\r",
									"    pm.expect(String(jsonData.person.u_name[1])).be.eql(req.salary);\r",
									"});\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"salary person = salary from request \", function () {\r",
									"    pm.expect(String(jsonData.person.u_age)).be.eql(req.age);\r",
									"});\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"salary person = salary from request \", function () {\r",
									"    pm.expect(jsonData.person.u_salary_5_years).be.eql(req.salary*4.2);\r",
									"});\r",
									"\r",
									"\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"\r",
									"for (var key in jsonData.person) {\r",
									"    console.log( key + \": \" + jsonData.person[key])\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"user_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"disabled": true
								},
								{
									"key": "age",
									"value": "{{age}}",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}